env:
  JOB_NAME: Name defined at job level
  JOB_OS: windows-latest
  JOB_ID: foo
  JOB_ACTION: actions/github-script@v3
  JOB_TIMEOUT: 1
  JOB_BOOL: true
  JOB_WITH: |
    { "script": "console.log('with block supplied as JSON string')" }
  JOB_STEP: |
    {"name": "env as step", "run": "echo Entire step defined as string"}
  JOB_ENTRY: /custom.sh
  JOB_ARGS: FirstArgument SecondArgument?

#name: ${{ env.JOB_NAME }} # error
name: Env context

on:
  push:
    branches:
      - master_DISABLED

jobs:
  job-level:
    #name: ${{ env.JOB_NAME }} # error
    name: Job 1
    #runs-on: ${{ env.JOB_NAME }} # error
    runs-on: ubuntu-latest
    steps:
      - name: env context in run
        run: echo ${{ env.JOB_NAME }} # works
      - name: env var in action
        uses: actions/github-script@v3
        with:
          script: |
            console.log('process.env.JOB_OS: ' + process.env.JOB_OS)
          # works, set via job level env
      - name: env context in action
        uses: actions/github-script@v3
        env:
          my_os: ${{ env.JOB_OS }} # works
        with:
          script: |
            console.log('process.env.my_os: ' + process.env.my_os)
      - name: env in id (set output)
        #id: ${{ env.JOB_ID }} # error
        id: foo
        run: |
          echo "::set-output name=result::bar"
      - name: env in id (read output)
        run: |
          echo "result = ${{ steps[env.JOB_ID].outputs.result }}"
      - name: env in uses
        #uses: ${{ env.JOB_ACTION }} # error
        uses: actions/github-script@v3
        with:
          script: console.log("${{ env.JOB_ACTION }}") # works
      - name: env in with
        uses: actions/github-script@v3
        with: ${{ fromJSON(env.JOB_WITH) }} # works
      #- ${{ fromJSON(env.JOB_STEP) }} # error
      - name: env in with.args
        uses: actions/hello-world-docker-action@v1
        with:
          entrypoint: /bin/echo
          args: ${{ env.JOB_ARGS }} # works
      - name: env in with.entrypoint
        uses: actions/hello-world-docker-action@v1
        continue-on-error: true
        with:
          who-to-greet: 'Mona the Octocat'
          entrypoint: ${{ env.JOB_ENTRY }} # works
      - name: env in timeout
        continue-on-error: true
        timeout-minutes: ${{ fromJSON(env.JOB_TIMEOUT) }} # works
        run: |
          echo sleeping for 2 minutes
          sleep 120
          echo done
      - name: env in continue
        continue-on-error: ${{ !!env.JOB_BOOL }} # works
        run: |
          exit 1

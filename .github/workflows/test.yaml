name: Test

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      trigger:
        description: Trigger Name
        required: true
        default: manual
      os:
        description: OS
        required: true
        default: ubuntu-latest

jobs:
  create-matrix:
    name: Create Matrix
    if: '!contains(github.event.head_commit.message, ''[skip ci]'')'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix-manual.outputs.matrix || steps.set-matrix-automatic.outputs.matrix }} 
    steps:
      - name: Actor
        run: |
          echo "${{ github.actor }}"
      - name: Bash startup options
        run: |
          ps aux
          echo "-- current PID: $$"
          tr "\0" "\n" < /proc/$$/cmdline # current shell
          echo "-- subshell PID: $BASHPID"
          tr "\0" "\n" < /proc/$BASHPID/cmdline # subshell
          echo "-- source code:"
          cat "$(tr "\0" "\n" < /proc/$$/cmdline | head -3 | tail -1)" # current shell
      - name: Bash startup options (continue on error)
        continue-on-error: true
        run: |
          echo "-- current PID: $$"
          tr "\0" "\n" < /proc/$$/cmdline # current shell
          echo "-- subshell PID: $BASHPID"
          tr "\0" "\n" < /proc/$BASHPID/cmdline # subshell
          echo "-- source code:"
          cat "$(tr "\0" "\n" < /proc/$$/cmdline | head -3 | tail -1)" # current shell
      - name: Format
        run: |
          echo "${{ format('{0}{1}', 'foo', 'bar') }}"
          echo "${{ format('foo', 'bar') }}"
      - name: Set Matrix (manual)
        id: set-matrix-manual
        env:
          MATRIX_JSON: '
            { "include": [{
              "build": 1,
              "cause": ${{ toJSON(github.event.inputs.trigger) }},
              "os": ${{ toJSON(github.event.inputs.os) }}
            }]}'
        run: echo "::set-output name=matrix::$MATRIX_JSON"
        if: github.event_name == 'workflow_dispatch'
      - name: Set Matrix (automatic)
        id: set-matrix-automatic
        env:
          MATRIX_JSON: '
            { "include": [{
              "build": 1,
              "cause": "automatic",
              "os": "ubuntu-latest"
            },{
              "build": 2,
              "cause": "automatic",
              "os": "windows-latest"
            }]}'
          MATRIX_TEST: '
            { "include": [{
              "non-unique": "foo",
              "non-unique2": "bar",
              "os": "ubuntu-latest"
            },{
              "non-unique": "foo",
              "non-unique2": "bar",
              "os": "ubuntu-latest"
            },{
              "non-unique": "foo",
              "unique": "baz",
              "os": "ubuntu-latest"
            }]}'
       #run: echo "::set-output name=matrix::$MATRIX_JSON"
        run: echo "::set-output name=matrix::$MATRIX_TEST"
        if: github.event_name != 'workflow_dispatch'
  build:
    name: Test Workflow
    needs: create-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.create-matrix.outputs.matrix) }}
    steps:
      - name: Matrix config
        env:
          MATRIX: ${{ toJSON(matrix) }}
        run: |
          echo "matrix = $MATRIX"
      - name: Windows cmd code page
        shell: cmd
        run: chcp
        if: startsWith(matrix.os, 'windows-')
      - name: Set multi-line env var (Bash)
        run: |
          echo 'JSON_RESPONSE<<EOF' >> $GITHUB_ENV
          echo '{"foo": "bar",' >> $GITHUB_ENV
          echo ' "baz": "`date`",' >> $GITHUB_ENV
          echo '}' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          echo '---'
          echo "GITHUB_ENV = $GITHUB_ENV"
          cat $GITHUB_ENV
        if: startsWith(matrix.os, 'ubuntu-')
      - name: Check env var
        run: |
          echo "$JSON_RESPONSE"
        if: startsWith(matrix.os, 'ubuntu-')
      - name: Set multi-line env var (PowerShell)
        run: |
          echo 'JSON_RESPONSE<<EOF' | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo '{"foo": "bar",' | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo ' "baz": "`date`",' | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo '}' | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo 'EOF' | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo '---'
          echo "GITHUB_ENV = $Env:GITHUB_ENV"
          cat $Env:GITHUB_ENV
        if: startsWith(matrix.os, 'windows-')
      - name: Check env var
        run: |
          echo "$Env:JSON_RESPONSE"
        if: startsWith(matrix.os, 'windows-')
      - name: Inputs
        env:
          VERSION: '1.2.3'
          PREFIX: '# 1'
          ANIMAL: duck
        run: |
          echo "trigger = ${{ github.event.inputs.trigger }} (workflow_dispatch only)"
          echo "build = ${{ matrix.build }}"
          echo "cause = ${{ matrix.cause }}"
          echo "trigger OR cause = ${{ github.event.inputs.trigger || matrix.cause }}"
          echo "workflow_dispatch ? trigger : cause = ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.trigger || matrix.cause }}"
          echo "OR falsey: ${{ 0 || 'truthy' }} / ${{ '' || 'truthy' }} / ${{ false || 'truthy' }} / ${{ null || 'truthy' }} / ${{ ' ' || 'space?' }}"
          echo "pseudo ternary: ${{ 0 == 0 && 'first' || 'second' }} / ${{ 0 != 0 && 'first' || 'second' }} / ${{ 0 == 0 && false || 'second' }}"
          echo "startsWith: ${{ startsWith(format('# {0}', env.VERSION), env.PREFIX) }}"
          echo "using inline object: ${{ fromJSON('{"cow": "moo!", "duck": "nak nak!"}')[env.ANIMAL] }}"
      - name: cat EOF
        run: |
          echo "cast to string:"
          cat<<'EOF'
            ${{ toJSON('quoted?') }}
          EOF
          cat<<'EOF'
            ${{ toJSON('foo' == 'foo') }}
          EOF
          cat<<'EOF'
            ${{ toJSON(format('foo' == 'foo')) }}
          EOF
          echo
          echo "github context:"
          cat<<'EOF'
            ${{ toJSON(github) }}
          EOF
        if: startsWith(matrix.os, 'ubuntu-')
      - name: pwsh heredoc
        run: |
          echo @"
            DONT STOP HERE "@
            ---
            ${{ toJSON(github) }}
          "@
        if: startsWith(matrix.os, 'windows-')
      - name: Only if manually triggered
        run: |
          echo "This workflow run was triggered manually"
        if: ${{ github.event_name == 'workflow_dispatch' }}
      - name: Only on push to branch
        run: |
          echo "This workflow run was triggered automatically"
        if: ${{ github.event_name != 'workflow_dispatch' }}
